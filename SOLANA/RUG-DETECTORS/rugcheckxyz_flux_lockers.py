# # # import requests

# # # # Hardcoded API URL with the token ID included
# # # url = "https://api.rugcheck.xyz/v1/tokens/Ag19bdRfrDU4WprGrbN8pJaEP3YbLvbuC9gsnaoJgFKz/lockers/flux"

# # # # Send GET request
# # # response = requests.get(url, headers={"accept": "application/json"})

# # # # Check for successful response
# # # if response.status_code == 200:
# # #     print("Lockers Information:")
# # #     print(response.json())
# # # else:
# # #     print(f"Error: {response.status_code}")
# # import requests
# # import time
# # import json

# # # Step 1: Authentication
# # def authenticate():
# #     # Replace the values with your actual data
# #     public_key = "HDqkdfTiSpF1KcxCMwfk6Hf1RxAHyfkqoKnmiFA9QYZ8"
# #     signed_message = "your_signed_message_here"
# #     signature_data = [0]  # Your signature data array here
# #     wallet_address = "HDqkdfTiSpF1KcxCMwfk6Hf1RxAHyfkqoKnmiFA9QYZ8"
    
# #     # Prepare the payload for authentication
# #     auth_payload = {
# #         "message": {
# #             "message": "Authenticating with RugCheck API",
# #             "publicKey": public_key,
# #             "timestamp": int(time.time())
# #         },
# #         "signature": {
# #             "data": signature_data,
# #             "type": "string"  # Replace with the correct type
# #         },
# #         "wallet": wallet_address
# #     }
    
# #     auth_url = "https://api.rugcheck.xyz/v1/auth/login/solana"
# #     headers = {
# #         "accept": "application/json",
# #         "Content-Type": "application/json"
# #     }

# #     # Send authentication request
# #     auth_response = requests.post(auth_url, headers=headers, data=json.dumps(auth_payload))
    
# #     if auth_response.status_code == 200:
# #         # Extract the token from the response
# #         token = auth_response.json().get("token")
# #         print("Authentication successful. Token:", token)
# #         return token
# #     else:
# #         print(f"Error authenticating: {auth_response.status_code}")
# #         return None

# # # Step 2: Fetch lockers data
# # def get_lockers_info(token):
# #     # Hardcoded token ID
# #     token_id = "Ag19bdRfrDU4WprGrbN8pJaEP3YbLvbuC9gsnaoJgFKz"
# #     url = f"https://api.rugcheck.xyz/v1/tokens/{token_id}/lockers"

# #     # Headers with the Bearer token
# #     headers = {
# #         "accept": "application/json",
# #         "Authorization": f"Bearer {token}"
# #     }

# #     # Send GET request to fetch lockers data
# #     response = requests.get(url, headers=headers)

# #     if response.status_code == 200:
# #         print("Lockers Information:")
# #         print(response.json())
# #     else:
# #         print(f"Error fetching lockers info: {response.status_code}")

# # if __name__ == "__main__":
# #     # Authenticate and get the token
# #     auth_token = authenticate()
    
# #     if auth_token:
# #         # Fetch lockers info if authentication is successful
# #         get_lockers_info(auth_token)
# import requests
# import json
# import time

# # Step 1: Authentication
# def authenticate():
#     # Phantom wallet public key (your wallet address)
#     public_key = "DaV9arACWQinZ73LjbdqNjeSi1R4Z7KNXxEynZoCTEyG"

#     # This signed message should be generated by your wallet
#     # Replace this with your actual signed message and signature
#     signed_message = "signed_message_here"
#     signature_data = [0]  # Your signature data array here
#     wallet_address = "HDqkdfTiSpF1KcxCMwfk6Hf1RxAHyfkqoKnmiFA9QYZ8"
    
#     # Prepare the payload for authentication
#     auth_payload = {
#         "message": {
#             "message": "Authenticating with RugCheck API",
#             "publicKey": public_key,
#             "timestamp": int(time.time())
#         },
#         "signature": {
#             "data": signature_data,
#             "type": "string"  # Replace with the correct type
#         },
#         "wallet": wallet_address
#     }
    
#     auth_url = "https://api.rugcheck.xyz/v1/auth/login/solana"
#     headers = {
#         "accept": "application/json",
#         "Content-Type": "application/json"
#     }

#     # Send authentication request
#     auth_response = requests.post(auth_url, headers=headers, data=json.dumps(auth_payload))
    
#     if auth_response.status_code == 200:
#         # Extract the token from the response
#         token = auth_response.json().get("token")
#         print("Authentication successful. Token:", token)
#         return token
#     else:
#         print(f"Error authenticating: {auth_response.status_code}, {auth_response.text}")
#         return None

# # Step 2: Fetch lockers data
# def get_lockers_info(token):
#     # Hardcoded token ID (use the token ID of the token you"re interested in)
#     token_id = "Ag19bdRfrDU4WprGrbN8pJaEP3YbLvbuC9gsnaoJgFKz"
#     url = f"https://api.rugcheck.xyz/v1/tokens/{token_id}/lockers"

#     # Headers with the Bearer token
#     headers = {
#         "accept": "application/json",
#         "Authorization": f"Bearer {token}"  # Use the token in Authorization header
#     }

#     # Send GET request to fetch lockers data
#     response = requests.get(url, headers=headers)

#     if response.status_code == 200:
#         print("Lockers Information:")
#         print(response.json())
#     else:
#         print(f"Error fetching lockers info: {response.status_code}")

# if __name__ == "__main__":
#     # Step 1: Authenticate and get the token
#     auth_token = authenticate()
    
#     # Step 2: Fetch lockers data if authentication is successful
#     if auth_token:
#         get_lockers_info(auth_token)
import requests
import json

url = "https://api.rugcheck.xyz/v1/auth/login/solana"
headers = {
    "accept": "application/json",
    "Content-Type": "application/json"
}

data = {
    "message": {
        "message": "string",
        "publicKey": "string",
        "timestamp": 0
    },
    "signature": {
        "data": [0],
        "type": "string"
    },
    "wallet": "string"
}

response = requests.post(url, headers=headers, json=data)

print(response.status_code)
print(response.json())
